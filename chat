import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import re

# ====== CONFIG ======
CSV_PATH = "your_data.csv"

BRANDS = [
    'bmw','volkswagen','mercedes-benz ag','volvo','toyota','ford','stellantis','nissan',
    'kia','renault','byd','tesla','mazda','hyundai','polestar','gm','jlr','subaru'
]
POWERTRAIN_KEEP = {'BEV','PHEV','MHEV','FCEVs'}

RENAME = {
    'Motor_Size_in_cc': 'Motor_cc',
    'Motor_Power_in_kw': 'Power_kW',
    'CO2_Emission_in_g_km': 'CO2_g_per_km',
    'Average_Fuel_Consumption_in_liter_100km': 'Fuel_L_per_100km',
    'Average_Electricity_Consumption_in_Kwh_100km': 'Elec_kWh_per_100km',
    'Electric_Range_in_km': 'ERange_km',
    'Vehicle_List_Price_including_Discounts_in_USD': 'Price_USD',
}

NUMERIC_COLS = ['Motor_cc','Power_kW','CO2_g_per_km','Fuel_L_per_100km',
                'Elec_kWh_per_100km','ERange_km','Price_USD']

LOWER_IS_BETTER = {'CO2_g_per_km','Fuel_L_per_100km','Elec_kWh_per_100km','Price_USD'}

# ====== HELPERS ======
def to_number(series):
    def _clean(x):
        if pd.isna(x): return pd.NA
        s = str(x).strip()
        if s in {"", "-", "--", "NA", "N/A", "nan"}: return pd.NA
        s = re.sub(r"[,$£€]", "", s)
        s = re.sub(r"[a-zA-Z%()]", "", s)
        s = s.replace(" ", "")
        return s
    s = series.map(_clean)
    return pd.to_numeric(s, errors="coerce")

def minmax(s):
    lo, hi = s.min(), s.max()
    return (s - lo) / (hi - lo + 1e-12)

# ====== LOAD & CLEAN ======
df = pd.read_csv(CSV_PATH)
df = df.rename(columns=RENAME)
df['Bidder_Name'] = df['Bidder_Name'].astype(str).str.strip().str.lower()
df = df[df['Bidder_Name'].isin(BRANDS)]
if POWERTRAIN_KEEP and 'Power_Train' in df.columns:
    df = df[df['Power_Train'].isin(POWERTRAIN_KEEP)]
for c in NUMERIC_COLS:
    if c in df.columns:
        df[c] = to_number(df[c])

# ====== PER BRAND AVERAGES ======
brand_avg = df.groupby('Bidder_Name', as_index=False)[NUMERIC_COLS].mean()

# ====== NORMALIZATION ======
for c in NUMERIC_COLS:
    norm_col = f"{c}_norm"
    if c in LOWER_IS_BETTER:
        brand_avg[norm_col] = 1 - minmax(brand_avg[c])
    else:
        brand_avg[norm_col] = minmax(brand_avg[c])

# ====== SCORE & RANK ======
norm_cols = [f"{c}_norm" for c in NUMERIC_COLS]
brand_avg['Score'] = brand_avg[norm_cols].mean(axis=1)
brand_avg['Rank'] = brand_avg['Score'].rank(ascending=False, method='min').astype(int)
brand_avg = brand_avg.sort_values('Rank')

# ====== FULL TABLE VIEW ======
pd.set_option('display.max_columns', None)
pd.set_option('display.width', None)
print("\n=== Per Brand Averages, Normalized Metrics, Score, Rank ===")
print(brand_avg.to_string(index=False))

# ====== PLOT TOP 10 ======
top10 = brand_avg.head(10)
plt.figure(figsize=(10,6))
sns.barplot(data=top10, x='Score', y='Bidder_Name', palette='viridis')
for i, v in enumerate(top10['Score']):
    plt.text(v + 0.005, i, f"{v*100:.2f}%", va='center', fontsize=10, fontweight='bold')
plt.title('Top 10 Brands with Highest Customer Value')
plt.xlabel('Score')
plt.ylabel('Brand')
plt.tight_layout()
plt.show()
